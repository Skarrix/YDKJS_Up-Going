Ch1 quick overview of what you'll want to learn+practice to get into programming

Code
  Language=syntax. code=set of instructions in a given language.
  Saved in txt file.

  Statement: group of words/numbers/operators performing specific task.
             Conclude with ;
             Made up of 1 or more Expressions
  a=b*2; where a/b = variables, 2 = literal value (stands alone), =/* = operators.

  Variables: holds values

  Operators: Performs actions with values and variables

  Expressions: a reference to variable or value, or set thereof, combined    with         operators.
              For a = b * 2
              2 = literal value expression
              b = variable expression (retrieve current value)
              b * 2 = arithmetic expression (execute multiplication), also 'expression statement' (stands alone, not useful bc does nothing with output)
              a = b * 2 = assignment expression (assign result of b*2 exp to variable a)
              alert( a ); = call expression statement

Compiler/Interpreter: runs/executes/compiles code into commands
  Interpreting code: top to bottom, line by line, each time program runs
  Compiling: translation done ahead of time

Practice on Dev Console

  Output
    a=21;
    b=a*2;
    console.log(b);
   Where
      console.log(..) = print text (aka output) to user
      log(b) = Function (log=print to console)
      console. = object reference where log(..) is located
   Another Output ex
      alert(..);

  Input
    most common: form elements (txt boxes) for user to type into, Js then used to read values into programs variables.
    Alternatively: promt(..) function
      age = prompt("Please tell me your age:");
      console.log(age);
      29
     Where
      age = variable where input is stored
      console.log(age) = outputs variable stored in age
      prompt(..) = creates pop-up prompt to enter variable
      "Please tell me your age:" = message printed in popup

Operators
  Perform actions on variables and values
    * is multiplication
    = is assignment. takes right (source value) & put into variable on left (target variable), ex a=42

    Ex
      a=2;
      b=a+1;
     Where
      2 assigned to a value
      then get value of a add one
      get value 3 and store in b
       or: b is a-value plus one

    var = keyword, declares (creates) variables
      always declare by name before using.
      only need declare once for each 'scope'
        Ex. var a=20;
            a = a+1;
            a = a*2;
            console.log(a);   //42

  JS common operators
    - Assignment: =
    - Math: +(add), -(subt), *(mult), /(div)
    - Compound Assignment: +=, -=, *=, /= (combines math operation with assignment, ex 1 +=2 same as a=a+2)
    - Increment/Decrement: ++(increment), --(decrement), ex. a++ similar to a=a+1
    - Object Property Access: . as in console.log()
      objects = values holding other values at 'properties'
      propterties = specific namedlocations.
       Ex. obj.a = object value called 'obj' with property name 'a'
       properties also accesable as obj["a"]
    - Equality: ==(loose-equals), ===(strict-equals), !=(loose not-equals), !==(strict not-equals)
      Ex. a==b
    - Comparison: <(less than), >(greater than), <=(less than or loose-equals), >=(greater than or loose-equals)
      Ex. a<=b
    - Logical: &&(and), ||(or)
      Ex. a||b selects either a or b
    Operators used to express compound conditionals, ex. if either a or b is true.

Values & Types
  Types: Called 'primitive values' in JS. = different representations of value
  - string, number, boolean, arrays, objects, functions, etc
   Ex.
    Math: number
    Print value: string
    Decision: boolean (true/false)
   Literals = values included indirectly in source code
    String literals: surrouned by ""(block quotes) or ''(single quotes)
    Number literals ex; 42
    Boolean literals ex; true

  Converting Between Types
    Coersion/coercing = converting from a value type to string or vice versa
    Ex.
      var a="42";
      var b=Number(a);
      console.log(a);    // "42"
      console.log(b);   // 42
     Where
      Number(..) = explicit coercion from any type to 'number' type
       Implicit coercion = compare two values of different type

    Comparing "99.99" with 99.99, though similar = two different types. thus, 'loosely equal'
      Ex.
        If making  comparison "99.99"==99.99 JS will convert left (string) to 'number' equivalent, 99.99. Thus becomes 99.99==99.99, which is 'true'
    This is 'implicit coercion', which JS will sometimes do to help you. Can cause bugs, but not if mechanism properly understood/learned

Code Comments
  Inserted for user use. Comp ignores.

  Good code:
    - Has comments
    - not too many (ex. one per line = too much)
    - Explains why not what. How optional if confusing

  Styles:
    // Single line comment - for above single statement or end of line. everything on line after // is treated as comment, no restrictions.
      Ex.
        var a=42;    // 42 is the meaning of life
    /* Multi line comment */ - for several lines worth of explanation.
      Ex.
        /* The following value is used because it has bene shown that it answers every question in the univers. */
        var a=42;
    can appear anywhere on line, even in middle
      Ex.
        var a= /* arbitrary value*/ 42;
        console.log(a);  // 42
