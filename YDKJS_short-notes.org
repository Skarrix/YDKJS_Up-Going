
-------------YDKJS Up&Going----------------
# Chapter 1

Statement
  ;

Expression
  a=b*2

Operators
  =
  +, -, *, /
  +=, -=, *=, /= (combines math operation with assignment, ex 1 +=2 same as a=a+2)
  ++(increment), --(decrement), ex. a++ similar to a=a+1
  .
  ==, ===, !=, !==
  <, >, <=, =>
  &&, ||

Objects
  values holding other values at 'properties'
  expresses compound conditionals
                              Ex. console.log()


Properties
  specific named locations
                              Ex. obj.a
                                object value called 'obj' with property name 'a'

Argument (parameters)
  passes values

Values&types
  string, number, boolean, arrays, objects, functions, etc

Variables
  var
  const

Blocks
 {..}
 Series of statements

Conditionals / control statements
  if
  else

Loops
  includes test condition () and block {}

Functions
  For code to be reused/'called' multiple times
  or
  Organization, to make logic clearer by collecting related code in named locations
                            Ex. function printAmount(amt) -given parameter
                                function formatAmount()   -returns value
Parameter
  of a function
                            Ex.  function printAmount(amt){}
                              where amt is parameter

Scope
  Lexical scope. That which is domain of a function
  Can only access functions within scope, or when nested within its own and any outer scope


# Chapter 2

JS has typed values, not variables.

Types:
  - string
  - number
  - boolean
  - null and Undefined
  - object
  - symbol
 typeof operator used to see what value is held

  Objects:
    Compound value where properties (named locations) can be set,
    Each holds own values of any type
      Ex. obj
    +----++----++----++----++----++----+
    | a: "hello world"| b: 42 | c: true |
    +----++----++----++----++----++----+
    Obj. accessed by . notation  ``obj.a;``
                  or [bracket]   ``obj["a"]``
    Keys: Properties accessed in bracket notation, ex 'a' above
  Obj. sub-types:
  - arrays: holds numerically indexed values Ex. obj[1]
  - functions

  Comparing Values
    Two types:
      - Equality
      - Inequality
    - result is boolean, regardless of value types compared

    Coercion
      - Explicit
      - Implicit

    Truthy & Falsy
      non-boolean implicitly coerced to boolean becomes truthy/falsy
      falsy: "", 0, -0, NaN, null, undefined, false
      truthy: everything else

    Equality
      - ==, ===, !=, !==
      Use == if certain of values, === if true/false is value or if value is uncertain.

    Inequality
      - >, <, <=, >=
      coercion same rules as ==, no ===
      used with numbers usually. number + string -> all coerced to number


Variables
  Valid identifiers:
    - A-Z, a-z, $, _, 0-9
  Reserve words
    - for, in, if
    - true, false, null

  Function Scopes
   Var keyword declares variable for current scope, or global scope if declared at top level outside function

    Hoisting:
      Hoisting: when var declaration conceptually moved to top of enclosing scope.

    Nested scopes
     var accessable anywhere in scope and every level upward, but now downward
     ReferenceError: when trying to access value not available in scope

     Setting undeclared var creates global scope variable -> poor practice.

     'let' keyword: declares variable usable only within block{}, thus not to higher functions if nested.


Conditionals
  - if/else
  - switch statement: less verbose altternative for if..else..if
      switch (a) {
        case 2:
        case 10:
          // do something
          break;

      - "fall through": ommitting 'break' either case runs


Strict Mode
  Stricter rules. Better for optimization
  Always use.


Functions as Values
  function value to be thought of as any other expression
  (the function itself is a value)

  IIFE (Immediately invoked function expressions)
    Ex. (function IIFE(){ .. }) vs function foo() -> foo();
     Outer () just so JS does not treat like normal function declaration
   - Often used to declare variables without affecting surrounding code outside IIFE

  Closure
   Way to remember and continue to access a function's scope even after it's finished running

   Modules: most common usage of closure.
    - lets you define private implementation details (vars, functions) hidden from outside world, incl API that is accesable


'this' Identifier
  function with 'this' reference usually points to an object
  which object depends on how function was called
  - 'this' does not refer to function itself, NB!
